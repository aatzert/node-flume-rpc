//
// Autogenerated by Thrift
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
ttypes.Priority = { 
'FATAL' : 0
,'ERROR' : 1
,'WARN' : 2
,'INFO' : 3
,'DEBUG' : 4
,'TRACE' : 5
}
ttypes.EventStatus = { 
'ACK' : 0
,'COMMITED' : 1
,'ERR' : 2
}
var ThriftFlumeEvent = module.exports.ThriftFlumeEvent = function(args){
  this.timestamp = null
  this.priority = null
  this.body = null
  this.nanos = null
  this.host = null
  this.fields = null
if( args != null ){  if (null != args.timestamp)
  this.timestamp = args.timestamp
  if (null != args.priority)
  this.priority = args.priority
  if (null != args.body)
  this.body = args.body
  if (null != args.nanos)
  this.nanos = args.nanos
  if (null != args.host)
  this.host = args.host
  if (null != args.fields)
  this.fields = args.fields
}}
ThriftFlumeEvent.prototype = {}
ThriftFlumeEvent.prototype.read = function(input){ 
  var ret = input.readStructBegin()
  while (1) 
  {
    var ret = input.readFieldBegin()
    var fname = ret.fname
    var ftype = ret.ftype
    var fid   = ret.fid
    if (ftype == Thrift.Type.STOP) 
      break
    switch(fid)
    {
      case 1:      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 2:      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32()
      } else {
        input.skip(ftype)
      }
      break
      case 3:      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 4:      if (ftype == Thrift.Type.I64) {
        this.nanos = input.readI64()
      } else {
        input.skip(ftype)
      }
      break
      case 5:      if (ftype == Thrift.Type.STRING) {
        this.host = input.readString()
      } else {
        input.skip(ftype)
      }
      break
      case 6:      if (ftype == Thrift.Type.MAP) {
        {
          var _size0 = 0
          var rtmp3
          this.fields = {}
          var _ktype1 = 0
          var _vtype2 = 0
          rtmp3 = input.readMapBegin()
          _ktype1= rtmp3.ktype
          _vtype2= rtmp3.vtype
          _size0= rtmp3.size
          for (var _i4 = 0; _i4 < _size0; ++_i4)
          {
            key5 = null
            val6 = null
            key5 = input.readString()
            val6 = input.readString()
            this.fields[key5] = val6
          }
          input.readMapEnd()
        }
      } else {
        input.skip(ftype)
      }
      break
      default:
        input.skip(ftype)
    }
    input.readFieldEnd()
  }
  input.readStructEnd()
  return
}

ThriftFlumeEvent.prototype.write = function(output){ 
  output.writeStructBegin('ThriftFlumeEvent')
  if (null != this.timestamp) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1)
    output.writeI64(this.timestamp)
    output.writeFieldEnd()
  }
  if (null != this.priority) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 2)
    output.writeI32(this.priority)
    output.writeFieldEnd()
  }
  if (null != this.body) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3)
    output.writeString(this.body)
    output.writeFieldEnd()
  }
  if (null != this.nanos) {
    output.writeFieldBegin('nanos', Thrift.Type.I64, 4)
    output.writeI64(this.nanos)
    output.writeFieldEnd()
  }
  if (null != this.host) {
    output.writeFieldBegin('host', Thrift.Type.STRING, 5)
    output.writeString(this.host)
    output.writeFieldEnd()
  }
  if (null != this.fields) {
    output.writeFieldBegin('fields', Thrift.Type.MAP, 6)
    {
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.fields))
      {
        for(var kiter7 in this.fields)        {
          if (this.fields.hasOwnProperty(kiter7))
          {
            var viter8 = this.fields[kiter7]
            output.writeString(kiter7)
            output.writeString(viter8)
          }
        }
      }
      output.writeMapEnd()
    }
    output.writeFieldEnd()
  }
  output.writeFieldStop()
  output.writeStructEnd()
  return
}

